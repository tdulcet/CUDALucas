# You can use this file to customize CUDALucas without having to create a long
# and complex command. I got tired of having to hit the up arrow a bunch of
# times whenever I rebooted, so I created this. You can set most of the command
# line options here; however, if you do use command line options, they will
# override their corresponding value in this file.

# CheckpointIterations is the same as the -c option; it determines how often
# checkpoints are written and also how often CUDALucas prints to terminal.
CheckpointIterations=10000

# This sets the name of the workfile used by CUDALucas.
WorkFile=worktodo.txt

# Polite is the same as the -polite option. If it's 1, each iteration is
# polite. If it's (for example) 12, then every 12th iteration is polite. Thus
# the higher the number, the less polite the program is. Set to 0 to turn off
# completely. Polite!=0 will incur a slight performance drop, but the screen 
# should be more responsive. Trade responsiveness for performance. (Note:
# polite=0 is known to cause CUDALucas to use some extra CPU time; Polite=64 or
# higher is a good compromise.)
Polite=1

# CheckRoundoffAllIterations is the same as the -t option. When active, each 
# iteration's roundoff error is checked, at the price of a small performance 
# cost. I'm not sure how often it's checked otherwise. This is a binary option;
# set to 1 to activate, 0 to de-activate.
CheckRoundoffAllIterations=0

# SaveAllCheckpoints is the same as the -s option. When active, CUDALucas will
# save each checkpoint separately in the folder specified in the "SaveFolder" 
# option below. This is a binary option; set to 1 to activate, 0 to de-activate.
SaveAllCheckpoints=0

# This option is the name of the folder where the separate checkpoint files are
# saved. This option is only checked if SaveAllCheckpoints is activated.
SaveFolder=savefiles

# Interactive is the same as the -k option. When active, you can press p, t, or
# s to change the respective options while the program is running. P is polite, 
# t is CheckRoundoffAllIterations, and s is the SaveAllCheckpoints feature
# above. This is a binary option; set to 1 to activate, 0 to de-activate.
Interactive=0

# Threads is the same as the -threads option. This sets the number of threads
# used in the FFTs. This must be 32, 64, 128, 256, 512, or 1024. (Some FFT
# lengths have a higher minimum than 32.)
Threads=256

# DeviceNumber is the same as the -d option. Use this to run CUDALucas on a GPU
# other than "the first one". Only useful if you have more than one GPU.
DeviceNumber=0

# PrintDeviceInfo sets whether or not CUDALucas prints information about your
# GPU. If -d is passed on the command line, this flag is set to true. With this
# option, you can choose to not print the information, even if using a device
# other than 0. This is a binary option; set to 1 to activate, 0 to de-activate.
PrintDeviceInfo=0

# FFTLength is the same as the -f option. If this is 0, CUDALucas will 
# autoselect a length for each exponent. Otherwise, you can set this with an
# override length; this length will be used for all exponents in worktodo.txt, 
# which may not be optimal (or even possible). In the future, I would like to 
# both create a better FFT length selection function, as well as be able to 
# specify a length on an individual-exponent basis (probably through a field in
# Test= in the work file). To see a list of reasonable FFT lengths, try running
# "$ CUDALucas -cufftbench 32768 3276800 32768" which will test a large range.
# In my personal experience on a GTX 460, I've found that for 26M exponents, 
# FFTLength=1474560 is a good length. (Technical note: FFT length must be a 
# multiple of 128*threads. See
# http://www.mersenneforum.org/showpost.php?p=292776&postcount=959 )
FFTLength=0
