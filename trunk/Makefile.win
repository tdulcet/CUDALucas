#################################################
#BIT =  x64 or WIN32                            # 
#CUDA = 4.0 4.1 4.2 5.0 5.5 6.0 6.5 7.0 7.5 8.0 #
#VER =  As required                             #
#################################################
# CUDA 3.2 no longer compiles due to   #
# code changes not in 3.2              #
# 32 bit not possible > CUDA 6.5       #
# Due to dropped support by nVidia     #
# CUDA >=7.0 does not support sm_1.x   #
# CUDA >=8.0 sm_2.x deprecated         #
# VS 2010 deprecated in > 7.5          #
########################################

VER = 2.06beta
BIT = x64
CUDA_VERSION = 4.0
NAME = CUDALucas$(VER)-CUDA$(CUDA_VERSION)-Windows-$(BIT).exe
OUT = $(NAME)
OptLevel = 1

CUDA = C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v$(CUDA_VERSION)

#### USEING JUST MSVS 2010 FOR NOW ###
#ifeq ($(CUDA_VERSION),$(filter $(CUDA_VERSION),5.5 6.0 6.5 7.0 7.5 8.0)) 
#	VCLOC = C:\Program Files (x86)\Microsoft Visual Studio 11.0
#else
	VCLOC = C:\Program Files (x86)\Microsoft Visual Studio 10.0
#endif

ifeq ($(BIT),x64)
	CCLOC = "$(VCLOC)\VC\bin\amd64"
else
	CCLOC = "$(VCLOC)\VC\bin"
endif
	
CC = $(CCLOC)\cl
CFLAGS = /O$(OptLevel) /Oy /GL /W4 /fp:fast /nologo

ifeq ($(CUDA_VERSION),$(filter $(CUDA_VERSION),4.0 4.1 4.2 5.0 5.5 6.0 6.5)) # >=7.0 no longer support 1.x
	SMCODE += -gencode arch=compute_13,code=compute_13
endif
ifeq ($(CUDA_VERSION),$(filter $(CUDA_VERSION),4.0 4.1 4.2 5.0 5.5 6.0 6.5 7.0 7.5 8.0))
	SMCODE += -gencode arch=compute_20,code=compute_20
endif
ifeq ($(CUDA_VERSION),$(filter $(CUDA_VERSION),4.2 5.0 5.5 6.0 6.5 7.0 7.5 8.0))
	SMCODE += -gencode arch=compute_30,code=compute_30
endif
ifeq ($(CUDA_VERSION),$(filter $(CUDA_VERSION),5.5 6.0 6.5 7.0 7.5 8.0))
	SMCODE += -gencode arch=compute_35,code=compute_35
endif
ifeq ($(CUDA_VERSION),$(filter $(CUDA_VERSION),6.0 6.5 7.0 7.5 8.0))
	SMCODE += -gencode arch=compute_32,code=compute_32 \
	          -gencode arch=compute_50,code=compute_50
endif
ifeq ($(CUDA_VERSION),$(filter $(CUDA_VERSION),6.5 7.0 7.5 8.0))
	SMCODE += -gencode arch=compute_37,code=compute_37 \
	          -gencode arch=compute_52,code=compute_52
endif
ifeq ($(CUDA_VERSION),$(filter $(CUDA_VERSION),7.5 8.0))
	SMCODE += -gencode arch=compute_53,code=compute_53
endif
ifeq ($(CUDA_VERSION),$(filter $(CUDA_VERSION),8.0))
	SMCODE += -gencode arch=compute_60,code=compute_60 \
	          -gencode arch=compute_61,code=compute_61 \
	          -gencode arch=compute_62,code=compute_62
endif

ifeq ($(BIT),x64)
	NVCCFLAGS = -m64
else
	NVCCFLAGS = -m32
endif
NVCCFLAGS += $(SMCODE) --ptxas-options=-v

CUFLAGS = -ccbin=$(CCLOC) -D$(BIT) -Xcompiler /EHsc,/W3,/nologo,/O$(OptLevel),/Oy,/GL $(NVCCFLAGS)

LINK = $(CCLOC)\link
LFLAGS = /nologo /LTCG #/ltcg:pgo

SRC = parse.c
CUSRC = CUDALucas.cu

CUOBJS = $(CUSRC:.cu=.cuda$(CUDA_VERSION).$(BIT).obj)
OBJS= $(SRC:.c=.$(BIT).obj)

LIBS = "$(CUDA)/lib/$(BIT)/cudart.lib" "$(CUDA)/lib/$(BIT)/cufft.lib"

#########################################################################################

all : ..\$(NAME)

..\$(NAME) : $(CUOBJS) $(OBJS)
	$(LINK) $(LFLAGS) $^ $(LIBS) /out:..\$(OUT)

%.cuda$(CUDA_VERSION).$(BIT).obj: %.cu
	"$(CUDA)/bin/nvcc" -c $< -o $@ $(CUFLAGS)

%.$(BIT).obj : %.c
	$(CC) $(CFLAGS) /c $< /Fo$@

#########################################################################################

clean :
	del $(OBJS)
	del $(CUOBJS)
	del *.o
cleaner: clean
	del ..\$(NAME)
	
debug: CFLAGS += /DEBUG	
debug: CUFLAGS += -DEBUG
debug: OUT = debug_$(NAME)
debug: ..\$(NAME)

test: CFLAGS += /DTEST
test: CUFLAGS += -DTEST
test: OUT = test_$(NAME)
test: ..\$(NAME)
