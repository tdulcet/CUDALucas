# You can use this file to customize CUDALucas without having to create a long
# and complex command. I got tired of having to hit the up arrow a bunch of
# times whenever I rebooted, so I created this. You can set most of the command
# line options here; however, if you do use command line options, they will
# override their corresponding value in this file.

# This sets the name of the work file used by CUDALucas.

WorkFile=worktodo.txt

# This sets the name of the results file used by CUDALucas.

ResultsFile=results.txt

# CheckRoundoffAllIterations is the same as the -t option. When active, each
# iteration's roundoff error is checked, at the price of a small performance
# cost. I'm not sure how often it's checked otherwise. This is a binary option;
# set to 1 to activate, 0 to de-activate.
###############################################################################
# This option is obsolete as of 2.05 Beta. Round off error is now checked every
# iteration anyway.
# CheckRoundoffAllIterations=0
###############################################################################

# This option is the name of the folder where the separate checkpoint files are
# saved. This option is only checked if SaveAllCheckpoints is activated.

SaveFolder=savefiles

# DeviceNumber is the same as the -d option. Use this to run CUDALucas on a GPU
# other than "the first one". Only useful if you have more than one GPU.

DeviceNumber=0

# PrintDeviceInfo is the same as the -info option. This sets whether or not
# CUDALucas prints information about your GPU. This is a binary option; set to
# 1 to activate, 0 to de-activate.

PrintDeviceInfo=1

# CheckpointIterations is the same as the -c option; it determines how often
# checkpoints are written and also how often CUDALucas prints to terminal.

CheckpointIterations=10000

# SaveAllCheckpoints is the same as the -s option. When active, CUDALucas will
# save each checkpoint separately in the folder specified in the "SaveFolder"
# option below. This is a binary option; set to 1 to activate, 0 to de-activate.

SaveAllCheckpoints=0

# Polite is the same as the -polite option. If it's 1, each iteration is
# polite. If it's (for example) 12, then every 12th iteration is polite. Thus
# the higher the number, the less polite the program is. Set to 0 to turn off
# completely. Polite!=0 will incur a slight performance drop, but the screen
# should be more responsive. Trade responsiveness for performance. (Note:
# polite=0 is known to cause CUDALucas to use some extra CPU time; Polite=50 or
# higher is a good compromise.)

Polite=0

# ErrorReset is a percent by which the error threshold is reduced at each checkpoint.
# Small values ensure that the actual maximum error since the last checkpoint is reported.
# With larger values, the reported error might be larger than the largest actual
# error since the last checkpoint. With a value of 100, only the maximum error since
# the program was last started will be reported. The advantage of large values is
# that fewer atomic operations are done. These are very slow. The slow down becomes
# increasingly apparent for values of ErrorRest <= 80. Default is 85.

ErrorReset=100

# Interactive is the same as the -k option. When active, you can press a key to
# change the program's behavior. The options are:
# p -- toggles polite mode.
# s -- togles the save all checkpoints option.
# F -- increase fft length.
# f -- decrease fft length.
# Q -- increase norm1 threads.
# q -- decrease norm1 threads.
# W -- increase mult threads.
# w -- increase mult threads.
# E -- increase norm2 threads.
# e -- decrease norm2 threads.
# R -- increase error reset percentage.
# r -- increase error reset percentage.
# T -- increase checkpoint interval.
# t -- decrease checkpoint interval.
# This is a binary option; set to 1 to activate, 0 to de-activate.

Interactive=1

# RoundoffTest is a binary option. 1 to check roundoff errors at the beginning of a test
# 0 to not check them.
# Default 0

RoundoffTest=0

# Output format options allow formatting the screen output to suit your own aesthetics.
# OutputHInterval tells how frequently to write the column header which is the line specified
# by the OutputHeader option. The OutputString value is written to the screen every checkpoint
# exactly as given, with any character following a % symbol be replaced with the values
# according to this list:
# %M -- Month
# %D -- Date
# %h -- Hours
# %m -- Minutes
# %s -- Seconds
# %i -- Iteration Number
# %p -- Exponent
# %r -- Residue.
# %f -- fft in multiples of K
# %F -- fft
# %C -- Elapsed time since last checkpoint  hh:mm:ss format
# %T -- ETA in d:hh:mm:ss format
# %N -- Program name
# %dk -- Percent done truncated after k decimal places, k = 0 -- 5
# %xk -- Round off error truncated after k decimal places, k = 0 -- 5
# %qk -- Iteration timing truncated after k decimal places, k = 0 -- 5
# %ck -- Elapsed time since last checkpoint in format xxx.xxxxx seconds truncated after k decimal places, k = 0 -- 5
# Example output of the format given below:
#
# |   Date     Time    |  Test Num     Iter         Residue        |   FFT    Error    ms/It    Time    |     ETA       Done   |
# |  Dec 15  12:46:01  |  M57885161  18900000  0x219381f578a2abf9  |  3136K  0.28516   5.3992  539.92s  |  2:11:05:11  32.65%  |
# |  Dec 15  12:55:01  |  M57885161  19000000  0x41e63fccc43ad9a5  |  3136K  0.29297   5.3993  539.93s  |  2:10:50:19  32.82%  |
# |  Dec 15  13:04:01  |  M57885161  19100000  0x6e8b11826f5f2620  |  3136K  0.29688   5.3998  539.98s  |  2:10:37:04  32.99%  |
#
# To use the more traditional formatting, set OutputHInterval=0, for no header with the new format, set OutputHInterval=-1

OutputHInterval=17
OutputHeader=|   Date     Time    |  Test Num     Iter         Residue        |   FFT    Error    ms/It     Time   |      ETA       Done   |
OutputString=|  %M %D  %h%m%s  |  M%p %i  %r  | %f  %x5 %q4 %c2s  |  %T%d2%%  |


# Threads is the same as the -threads option. This sets the number of threads
# used in the normalization kernels and multiplication kernel. These are three
# vaules. each must be 32, 64, 128, 256, 512, or 1024. (Some FFT lengths have
# a higher minimum than 32.)  These vaules will  be used only if no
# <gpu> threads.txt file is present or no # entry for the current exponent is
# in that file. The file is generated by running
#
# ./CUDALucas -cufftbench n n k
#
# where n is the fft length and k is the number of times to repeat the test at each
# setting. For cards not running the display, k = 1 is usually sufficient. Otherwise,
# larger values such as k = 10, as well as multiple runs are often needed. The
# <gpu> threads.txt file can be edited. Each row must be of the form:
#
# fft norm1 mult norm2
#
# where fft is the fft length as a multiple of 1K, norm1, mult, and norm2 are the
# threads settings and must again be 32, 64, 128, 256, 512, or 1024. Note that some
# of these values might cause an error, depending on the fft length.
# Running
#
# ./CUDALucas -cufftbench n m k
#
# with m < n will test threads for all default fft lengths and all lengths in the
# <gpu> fft.txt file that are between m and n. This may take a while to finish.
# Default: 256 128 128

Threads=256 128 128

# FFTLength is the same as the -f option. If this is 0, CUDALucas will
# autoselect a length for each exponent. Otherwise, you can set this with an
# override length; this length will be used for all exponents in worktodo.txt,
# which may not be optimal (or even possible).
#
# Users should be aware however that you can now specify the FFT length on a
# per-exponent basis via the work file; to use (e.g.) a 1440K length for a test,
# the line should look like "Test=<assignment key>,<exponent>,1440K". Note
# that there can be no space between the number (1440) and the K. You must have
# a K or M (e.g. ",<exponent>,3M" for a 3M length) for the program to recognize
# the field as an FFT length.  This newer work file feature should render this
# ini option obsolete (which should thus be kept at 0).
#
# To see a list of reasonable FFT lengths, try running (e.g.)
# "$ ./CUDALucas -cufftbench 1 8192 1" which will test a large range.

FFTLength=0
