Q. What files should I download from SourceForge?
A. There are various executables for both Windows and Linux, some text files,
   and some necessary library files. Pick whichever executable is best for you,
   then download all the text files including this README and CUDALucas.ini. 
   Next, pick the library archive for your operating system. Place all these
   files into your CUDALucas folder, and then read the rest of this README.
   
Q. I get errors about "lib cudart not found" or "lib cufft not found". What can
   I do?
A. See section 3 of this document; you can download the files from SourceForge:
<http://sourceforge.net/projects/cudalucas/files/CUDA%20Libs/>


####################
# CUDALucas README #
####################
CUDALucas v2.04 Beta

Content

0    What is CUDALucas?
1    Supported Hardware
2    Compilation
 2.1 Compilation (Linux)
 2.2 Compilation (Windows)
3    Running CUDALucas
 3.1 Running CUDALucas (Windows)
4    How to get work and report results from/to GIMPS
5    Known issues
6    Tuning
7    FAQ
8    To do list



#######################
# 0 What is CUDALucas #
#######################

(See https://sourceforge.net/p/cudalucas/wiki/Home/ for a version of this
information that includes links.)

CUDALucas is a program implementing the Lucas-Lehmer primality test for 
Mersenne numbers using the Fast Fourier Transform implemented by nVidia's cuFFT
library. You need a CUDA-capable nVidia card with compute compatibility >= 1.3.

Mersenne numbers are numbers of the form 2^p - 1; it is possible that some of 
these numbers are prime. For instance, 2^7-1 is prime, 2^127-1 is prime, and 
2^43,112,609-1 is prime (and is also the largest known prime number in the 
world). For various reasons explained in the Wikipedia article, throughout 
almost all known history, the largest known prime number has been a Mersenne 
prime.

Most CUDALucas' users that the developers are aware of use this program to help 
search for Mersenne primes in coordination with the Great Internet Mersenne 
Prime Search. It is one of the internet's first distributed computing projects, 
started in 1996, and since that year has found all of the largest known prime 
numbers. GIMPS searches for primes by doing some "trial factoring" to find a 
small factor of a Mersenne number; if that fails, then GIMPS performs the 
Lucas-Lehmer test to determine once and for all if a Mersenne number is prime. 
You can participate without needing to be aware of the mathematics involved; 
all you need to do is download and run the free program GIMPS provides called 
Prime95.

However, Prime95 is optimized for CPUs; in the last few years, volunteer 
developers from the GIMPS community have ported various parts of Prime95's 
functionality to GPUs. Shoichiro Yamada took a CPU-based Lucas-Lehmer testing 
program (written in generic C, as opposed to the x86-specific assembly of 
Prime95) and ported it to CUDA; this is now known as CUDALucas. Mr. Yamada 
remains the primary developer of the mathematics code; his username on 
MersenneForum.org is 'msft' (and I hope to add him as an admin of this 
SourceForge project as soon as possible). The other GPU programs are mfaktc, a 
program using CUDA GPUs to perform the "trial factoring" mentioned above, and 
mfakto which is a port of mfaktc to OpenCL, supporting AMD/ATI graphics cards. 
(mfakto's developer maintains a GitHub page for it; both programs are 
free-and-open-source software under the GPL.)

To participate in GIMPS yourself using CUDALucas (assuming you have the 
necessary CUDA hardware listed above), all you need to do is go read section 4.



########################
# 1 Supported Hardware #
########################

CUDALucas should run all all CUDA capable Nvidia GPUs with compute capability
>= 1.3. Unfortunately this obviously excludes AMD/ATI GPUs, but there are other
programs for such cards that you can use to help GIMPS (see section 0).



#################
# 2 Compilation #
#################

You must have the CUDA Toolkit installed, as well as a C compiler. gcc or MSVC
will do in a pinch. The CUDA Toolkit includes nVidia's CUDA compiler, as well
as some necessary library and include files. (You do not need the full CUDA 
SDK.) You can get the Toolkit from <http://developer.nvidia.com/cuda-toolkit>.

We are still trying to determine which version CUDA libraries and which
architectures produce the fastest executable. In the meantime, use the latest
toolkit plus the defaults in the Makefiles. (Please tell us, either on
SourceForge or on MersenneForum, if you figure out which combinations work 
better.)

There are some different make commands you can run, but at the moment none of
them does anything particularly interesting.


###########################
# 2.1 Compilation (Linux) #
###########################

You should be able to run 'make' without modifications. If, when you installed
the toolkit, you did not follow the nVidia defaults, you might need specify a 
different CUDA Toolkit location other than the default '/usr/local/cuda' used 
in the Makefile.


#############################
# 2.2 Compilation (Windows) #
#############################

You will need to download make.exe 
(http://gnuwin32.sourceforge.net/packages/make.htm)
Update the makefile.win with the version you want to compile. You should be 
able to run 'make -f makefile.win' without modifications. If, when you
installed the toolkit, you did not follow the nVidia defaults, you might need 
specify a different CUDA Toolkit location in the makefile.win file.



##############################
# 3 Running CUDALucas        #
##############################

CUDALucas is designed to be primarily driven with the information in 
CUDALucas.ini. (If you don't have a copy of that file, go to 
https://sourceforge.net/projects/cudalucas/files/ to get the latest version.)
You can run CUDALucas from the command line without any arguments, and it
should read CUDALucas.ini (it should be in the same directory) and start
crunching.

CUDALucas reads what numbers to test from a "work file". The default work file
is "worktodo.txt", however you can change the name of that file in 
CUDALucas.ini. The information in the work file should look something like:
Test=25613431
CUDALucas will interpret this to mean "Test 2^25613431-1 to see if it's a prime
number." See section 4 on how to get numbers to test that haven't been tested
before. (This is done through GIMPS.)
CUDALucas will keep crunching numbers as long as there are assignments in your
work file; it will exit if the file is empty.
Alternately, you can just pass in a single exponent as a command line argument, 
and CUDALucas will then test 2^arg-1 and exit.

When it's done testing a number, CUDALucas will output the results to a 
"results file", which defaults to "results.txt"; again, however, you can change
that using the .ini file. We highly encourage you to report your results to 
GIMPS (see section 4). You can keep track of your results if you create an 
account with GIMPS.

You can modify a number of options that change how CUDALucas behaves; again, 
see CUDALucas.ini. You can also specify any of those options from the command 
line; try running "./CUDALucas -h" from a terminal to see what options you can 
use. Also note that there is a self test mode and a benchmark mode that can 
only be specified from the command line.

Note that you need library files to run CUDALucas; these are "cudart.dll" and
"cufft.dll" for Windows, and "cudart.so" and "cufft.so" for Linux. In Windows,
it's sufficient to put the .dll files into the same directory as the 
executable; in Linux, you have to set the LD_LIBRARY_PATH environment varibale 
to include the directory where the .so's are located. These files can be
downloaded from SourceForge.

It is safe to kill CUDALucas with a Ctrl+C (or by most any other method) at any
time. It will write a save file and exit. When you next run CUDALucas, it will
detect that there is a save file and resume.

Please feel free to ask for help on SourceForge or MersenneForum.org if this 
isn't clear.


###################################
# 3.1 Running CUDALucas (Windows) #
###################################

Read the section above first.

Though CUDALucas is called from the command line, you can modify its behavior
with CUDALucas.ini, which means you don't need to pass arguments on the command
line. What this means for Windows users is that you can right click on the
executable and create a shortcut. Double clicking on the shortcut should launch
CUDALucas in a terminal where you can watch it crunch. (The drawback to this
is that if CUDALucas exits with an error, the terminal will automatically close
and you won't see the error message.)



###################################################################
# 4 How to get work and report results from/to the GIMPS server   #
###################################################################

You can get numbers to test from the GIMPS server, which is called PrimeNet.
It is located at http://www.mersenne.org/. You can get and report work 
anonymously, however to track what numbers you've tested and track your credit, 
you must create an account. You don't even need to enter your email for an 
account, though of course it's good to have if you ever lose your login 
information :)

Getting work:
  Step 1) go to http://www.mersenne.org/ and (optionally) login with your 
          username and password
  Step 2) on the menu on the left click "Manual Testing" and then
          "Assignments"
  Step 3) Choose the number of assignments you want. Note that even the
          smallest assignment will take a few days to complete, so we recommend
          you start with just one and come back for more when you know how
          fast you can complete work.
  Step 4) Choose your preferred work type. There are a variety of choices here;
          you can choose the default "World record tests", which means if your
          number is prime, it would be a world record. "Smallest available
          first time tests" might be not-World-record, though practically 
          it's exactly the same as "World record tests". "100 million digits"
          is way what's currently feasible, and will take months or years
          to complete one test. This isn't recommended. Finally, "Double Check
          tests" is where you get numbers that have been tested once, but 
          haven't been double checked. Though Double Checking sounds less 
          glamorous, we currently recommend this work type. Not only are the 
          assignments much shorter, but at the moment, two matching CUDALucas
          tests will not mark an number as "Double Checked". (This is for 
          safety reasons, and hopefully we'll add more functionality in the
          future to remove this restriction.) What this means is that it's 
          safer for CUDALucas to test numbers that have been tested once with
          Prime95, though some people do first time tests anyways.
  Step 5) Click the button "Get Assignments"
  Step 6) Copy and paste the "Test=..." (or "DoubleCheck=...") lines directly 
          into your work file (default "worktodo.txt") in your CUDALucas
          directory.


Now you're all set. Just launch CUDALucas and watch it crunch :)

Once CUDALucas has finished a test, report the result to PrimeNet:
  Step 1) go to http://www.mersenne.org/ and (optionally) login with your 
          username and password. (Again, if you want to track your credit, 
          logging in is necessary.)
  Step 2) On the menu on the left click "Manual Testing" and then
          "Results"
  Step 3) Upload the results file (default "results.txt") generated by
          CUDALucas by using the "Search" and "Upload" buttons.
  Step 4) Once PrimeNet responds with a verification message, you can either
          delete your results file or move the data to a different file.

Advanced usage (set the FFT length):    
    Recently (since 2.04) you can now specify the FFT length by adding a field
    to the "Test=..." assignment line in the work file. To use (e.g.) a 1440K 
    length for a test, the line should look like 
    "Test=<assignment key>,<exponent>,1440K". Note that no space is allowed
    between the number (1440) and the K. You must have a K or M 
    (e.g. "...,<exponent>,3M" for a 3M length) for the program to recognize the
    field as an FFT length.
    
    This feature should render the FFTLength ini option and the -f command line
    option obsolete.



##################
# 5 Known issues #
##################

- The user interface isn't hardened against malformed input. There are some
  checks but when you really try you should be able to screw it up.
- The GUI of your OS might be very laggy while running CUDALucas. (Newer GPUs
  with compute capabilty 2.0 or higher can handle this _MUCH_ better.)
  If you're experiencing this problem, try setting "Polite" to 1 in 
  CUDALucas.ini.
- The very first checkpoint after a restart appears to have very quick 
  iteration times, but aren't actually that fast. The second checkpoint and 
  beyond appear normal.



############
# 6 Tuning #
############

Read CUDALucas.ini (you should have already read it in any case). Some options
to look at are "Polite", "Threads", and "CheckRoundOffAllIterations". You can 
also activate as an option to save all checkpoint files instead of just the 
most recent ones.



#########
# 7 FAQ #
#########

Q Does CUDALucas support multiple GPUs?
A Yes, with the exception that a single instance of CUDALucas can only use one
  GPU. For each GPU you want to run CUDALucas on you need (at least) one
  instance of CUDALucas. For each instance of CUDALucas you can use the
  commandline option "-d <GPU number>" to specify which GPU to use for each
  specific CUDALucas instance. Please read the next question, too.

Q Can I run multiple instances of CUDALucas on the same computer?
A Yes! You can even run more than one instance from the same dir. Use the
  "CUDALucas -i <ini filename>" command line option to specify an INI file 
  other than the default "CUDALucas.ini". Each instance must have its own work 
  file, however it is safe for all instances to print to the same results file. 
  It is NOT safe for two instances to test the same exponent -- they will
  clobber each others' save files.

Q Can I continue (load a checkpoint) from a 32bit version of CUDALucas with a
  64bit version of CUDALucas (and vice versa)?
A Yes!

Q Can I continue (load a checkpoint) from an older version of CUDALucas with a
  newer verwion of CUDALucas (and vice versa)?
A Yes, but be careful. All versions starting with 2.xx should be compatible, as
  well as a few earlier versions (e.g. 1.6x) however, before then, it should be
  considered unsafe unless you wade through the MersenneForum CUDALucas thread
  to find out when the format changed. This question and answer will also be
  updated if the format changes in the future.

Q Version numbers
A Release numbers are X.XX, where the first number has now reached 2, and the
  other two just go up by one with each release. If you get a version with
  "Alpha" or "Beta" in it, then it probably doesn't work right and you 
  shouldn't use it for "production" work.
  


###########
# 8 To do #
###########
See the TODO file for more details.

2.05:
- Add log file support.
- Much of the code is placed in the wrong functions, so the interface between
    functions is often extremely awkward. I'd like to fix this, especially 
    since it will go a long way to adding log functionality for 2.05.
    
TBA:
- automatic primenet interaction (Eric Christenson is working on this for mfaktc)         
                           ^ specification draft exists
  - This will mean users don't have to manually get and report work from PrimeNet
  - The security module that would be used would be closed source, to maintain
    integrity of PrimeNet's data. GPL v3 does not allow to have parts of the 
    program to be closed source. Solution: We'll re-release under another
    license. This is NOT the end of the GPL v3 version! We'll release future 
    versions of CUDALucas under GPL v3! We want CUDALucas being open source! 
    The only differences of the closed version will be the security module and 
    the license information.
